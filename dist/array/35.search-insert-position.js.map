{"version":3,"sources":["../../src/array/35.search-insert-position.js"],"names":["searchInsert","nums","target","ret","i","length","searchInsertBinary","mid","start","end","Math","floor"],"mappings":";;AAAA;;;;;;;;;;AAUA;;;;;;AAMA,IAAIA,YAAY,GAAG,SAAfA,YAAe,CAASC,IAAT,EAAeC,MAAf,EAAuB;AACxC,MAAIC,GAAG,GAAG,CAAC,CAAX;;AACA,OAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,IAAI,CAACI,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC,QAAIH,IAAI,CAACG,CAAD,CAAJ,GAAUF,MAAd,EAAsB,CACrB,CADD,MACO,IAAID,IAAI,CAACG,CAAD,CAAJ,IAAWF,MAAf,EAAuB;AAC5BC,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD,KAHM,MAGA;AACLD,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD;AACF;;AACDD,EAAAA,GAAG,GAAGA,GAAG,GAAG,CAAN,GAAUF,IAAI,CAACI,MAAf,GAAwBF,GAA9B;AACA,SAAOA,GAAP;AACD,CAdD;AAgBA;;;;;;AAIA,IAAIG,kBAAkB,GAAG,SAArBA,kBAAqB,CAASL,IAAT,EAAeC,MAAf,EAAuB;AAC9C,MAAIK,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAGR,IAAI,CAACI,MAAL,GAAc,CAAxB;;AACA,SAAOG,KAAK,IAAIC,GAAhB,EAAqB;AACnBF,IAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,GAAGC,GAAT,IAAgB,CAA3B,CAAN;;AACA,QAAIR,IAAI,CAACM,GAAD,CAAJ,GAAYL,MAAhB,EAAwB;AACtBO,MAAAA,GAAG,GAAGF,GAAG,GAAC,CAAV;AACD,KAFD,MAEO,IAAIN,IAAI,CAACM,GAAD,CAAJ,IAAaL,MAAjB,EAAyB;AAC9BM,MAAAA,KAAK,GAAGD,GAAR;AACA;AACD,KAHM,MAGA;AACLC,MAAAA,KAAK,GAAGD,GAAG,GAAC,CAAZ;AACD;AACF;;AACD,SAAOC,KAAP;AACD,CAhBD,C,CAkBA;AACA;AACA;AAEA;AACA;AACA;;;AACAF,kBAAkB,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAD,EAAY,CAAZ,CAAlB,C,CAGA;AACA","sourcesContent":["/**\n * Easy\n * \n * Given a sorted array and a target value, return the index if the target is found.\n * If not, return the index where it would be if it were inserted in order.\n * [https://leetcode.com/problems/search-insert-position/](https://leetcode.com/problems/search-insert-position/)\n *\n * 从有序数组中查找数值插入位置\n */\n\n/**\n * 1. 从头到尾循环\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n  var ret = -1;\n  for (i = 0; i < nums.length; i++) {\n    if (nums[i] < target) {\n    } else if (nums[i] == target) {\n      ret = i;\n      break;\n    } else {\n      ret = i;\n      break;\n    }\n  }\n  ret = ret < 0 ? nums.length : ret;\n  return ret;\n};\n\n/**\n * 2. 二分法查找\n * 适合大量数据的时候使用\n */\nvar searchInsertBinary = function(nums, target) {\n  var mid = 0;\n  var start = 0;\n  var end = nums.length - 1;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (nums[mid] > target) {\n      end = mid-1;\n    } else if (nums[mid] == target) {\n      start = mid;\n      break;\n    } else {\n      start = mid+1;\n    }\n  }\n  return start;\n};\n\n// [1,3,5,6]\n// 5\n// 2\n\n//[1,3,5,6]\n//7\n//4\nsearchInsertBinary([1,3,5,6], 4)\n\n\n//[1,3,5,6]\n//0\n"],"file":"35.search-insert-position.js"}