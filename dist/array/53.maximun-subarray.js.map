{"version":3,"sources":["../../src/array/53.maximun-subarray.js"],"names":["maxSubArray","nums","max","i","length","j","temp","getSum","sum","maxSubArray2","dp","maxSum","Math","maxSubArray3","maxEndingHere","ret2","console","log","x","y","maxSubArray4","a","arr","b","maxSubArray5","pd","db"],"mappings":"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","sourcesContent":["/**\n * Easy\n * \n * Given an integer array nums, find the contiguous subarray (containing at least one number)\n * which has the largest sum and return its sum.\n * 获取 sum  最大的子数组\n */\n\n/**\n *\n * 不合格，对于数据量大的时候太耗费时间\n * O(n^3)\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n  var max = nums[0];\n  for (i = 0; i < nums.length; i++) {\n    for (j = i; j < nums.length; j++) {\n      var temp = getSum(nums, i, j);\n      if (temp > max) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n};\n\nfunction getSum(nums, i, j) {\n  var sum = 0;\n  for (i; i <= j; i++) {\n    sum += nums[i];\n  }\n  return sum;\n}\n\n/**\n * Dynamic Programming\n * Time: O(n)\n * Space: O(n)\n * input array: [1, 0, -5, 3]\n * dp: [1, 1, -4, 3], 最大值会存储在 dp 中\n * @param {array} nums\n */\nvar maxSubArray2 = function(nums) {\n  if (!nums) {\n    throw 'error';\n  }\n  var dp = [];\n  dp[0] = nums[0];\n  var maxSum = nums[0];\n  for (var i = 1; i < nums.length; i++) {\n    dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);\n    maxSum = Math.max(maxSum, dp[i]);\n  }\n  return maxSum;\n};\n// var ret = maxSubArray2([1,5,-1,-1,3]);\n// console.log(ret);\n\n/**\n * Dynamic Programming ？？？？ TODO 不会\n * Time: O(n)\n * Space: O(n)\n * input array: [1, 0, -5, 3]\n * dp: [1, 1, -4, 3], 最大值会存储在 dp 中\n * @param {array} nums\n */\nvar maxSubArray3 = function(nums) {\n  if (!nums) {\n    throw 'error';\n  }\n\n  var maxEndingHere = nums[0];\n  var maxSum = nums[0];\n  for (var i = 1; i < nums.length; i++) {\n    maxEndingHere = Math.max(maxEndingHere + nums[i], nums[i]);\n    maxSum = Math.max(maxSum, maxEndingHere);\n  }\n  return maxSum;\n};\nvar ret2 = maxSubArray3([0, 5, -1, -1, 3]);\nconsole.log(ret2);\n\n// [1]\n// 1\n\n//[-1]\n// -1\n\nvar max = function(x, y) {\n  return x > y ? x : y;\n};\n\n/**\n * Dynamic Programming 2: 给数组，求不相连的元素和最大值\n * 递归\n * 选或不选，从末尾开始思考\n * i=8, 如果 OPT(i) = max{ OPT(7) ; OPT(6) + nums[7] }\n * @param {array} nums\n */\nvar maxSubArray4 = function(nums, i) {\n  if (i == 0) return nums[0];\n  if (i == 1) {\n    return nums[0] > nums[1] ? nums[0] : nums[1];\n  }\n\n  var a = maxSubArray4(nums, i - 2) + arr[i]; // 不相连 i-2\n  var b = maxSubArray4(nums, i - 1);\n  return a > b ? a : b;\n};\n//非递归解法\nvar maxSubArray5 = function(nums) {\n  var pd = [];\n  pd[0] = nums[0];\n  pd[1] = max(nums[0], nums[1]);\n  for (var i; i < nums.length; i++) {\n    var a = pd[i - 2] + arr[i];\n    var b = pd[i - 1];\n    dp[i] = max(a, b);\n  }\n  return db[db.length - 1];\n};\n"],"file":"53.maximun-subarray.js"}