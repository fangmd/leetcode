{"version":3,"sources":["../../src/array/26.remove-duplicates-from-sorted-array.js"],"names":["removeDuplicates","nums","removeItems","i","length","push","j","splice","removeDuplicates2","res","console","log"],"mappings":";;AAAA;;;;;;;;;;;;;;AAeA;;;;;AAKA,IAAIA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASC,IAAT,EAAe;AACpC,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,IAAI,CAACG,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC,QAAIF,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,IAAeF,IAAI,CAACE,CAAD,CAAJ,KAAYF,IAAI,CAACE,CAAC,GAAG,CAAL,CAAnC,EAA4C;AAC1CD,MAAAA,WAAW,CAACG,IAAZ,CAAiBF,CAAC,GAAG,CAArB;AACD;AACF;;AACD,OAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,IAAI,CAACG,MAArB,EAA6BE,CAAC,EAA9B,EAAkC;AAChCL,IAAAA,IAAI,CAACM,MAAL,CAAYD,CAAZ,EAAe,CAAf;AACD;;AACD,SAAOL,IAAI,CAACG,MAAZ;AACD,CAXD;AAaA;;;;;;;;AAMA,IAAII,iBAAiB,GAAG,SAApBA,iBAAoB,CAASP,IAAT,EAAe;AACrC,MAAGA,IAAI,CAACG,MAAL,IAAe,CAAlB,EAAqB,OAAO,CAAP;AACrB,MAAID,CAAC,GAAG,CAAR;;AACA,OAAIG,CAAC,GAAC,CAAN,EAASA,CAAC,GAACL,IAAI,CAACG,MAAhB,EAAwBE,CAAC,EAAzB,EAA4B;AACxB,QAAGL,IAAI,CAACE,CAAD,CAAJ,KAAYF,IAAI,CAACK,CAAD,CAAnB,EAAuB;AACnBH,MAAAA,CAAC;AACDF,MAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUF,IAAI,CAACK,CAAD,CAAd;AACH;AACJ;;AACD,SAAOH,CAAC,GAAC,CAAT;AACD,CAVD;;AAaA,IAAIM,GAAG,GAAGD,iBAAiB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CAA3B;AACAE,OAAO,CAACC,GAAR,CAAYF,GAAZ","sourcesContent":["/**\n * Easy\n * 要求\n * Given a sorted array nums, remove the duplicates in-place such that each element appear \n * only once and return the new length.\n * Do not allocate extra space for another array, you must do this by modifying\n * the input array in-place with O(1) extra memory.\n * \n * example 1:\n * Given nums = [1,1,2],\n * Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\n * It doesn't matter what you leave beyond the returned length.\n */\n\n\n/**\n * 版本一：循环，不符合要求\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n  var removeItems = [];\n  for (i = 0; i < nums.length; i++) {\n    if (nums[i + 1] && nums[i] === nums[i + 1]) {\n      removeItems.push(i + 1);\n    }\n  }\n  for (j = 0; j < nums.length; j++) {\n    nums.splice(j, 1);\n  }\n  return nums.length;\n};\n\n/**\n * Two Pointers 双指针\n * 把不同的值都往前移\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates2 = function(nums) {\n  if(nums.length == 0) return 0;\n  var i = 0;\n  for(j=1; j<nums.length; j++){\n      if(nums[i] !== nums[j]){\n          i++;\n          nums[i] = nums[j];\n      }\n  }\n  return i+1;\n};\n\n\nvar res = removeDuplicates2([1, 1, 2]);\nconsole.log(res);\n\n"],"file":"26.remove-duplicates-from-sorted-array.js"}